{"version":3,"sources":["components/Navbar.jsx","components/TextForm.jsx","components/Alert.jsx","App.js","reportWebVitals.js","index.js"],"names":["Navbar","props","className","mode","href","title","type","id","onClick","toggleMode","role","for","defaultProps","about","TextForm","useState","text","setText","countWords","length","charAt","split","style","color","heading","rows","value","onChange","event","target","backgroundColor","newText","toUpperCase","showAlert","toLowerCase","document","getElementById","select","navigator","clipboard","writeText","join","Alert","alert","class","word","lower","slice","capitalize","msg","App","setMode","setAlert","message","setTimeout","body","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.647eda8d.chunk.js","sourcesContent":["import React from 'react'\nimport PropTypes from 'prop-types'\n// import { Link } from 'react-router-dom'\n\nconst Navbar = (props) => {\n    return (\n        <nav className={`navbar navbar-expand-lg navbar-${props.mode} bg-${props.mode}`}>\n        <div className=\"container-fluid\">\n          <a className=\"navbar-brand\" href=\"#\">{props.title}</a>\n          <button className=\"navbar-toggler\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#navbarSupportedContent\" aria-controls=\"navbarSupportedContent\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\n            <span className=\"navbar-toggler-icon\"></span>\n          </button>\n          <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\n            <ul className=\"navbar-nav me-auto mb-2 mb-lg-0\">\n              <li className=\"nav-item\">\n                <a className=\"nav-link active\" aria-current=\"page\" href=\"#\">Home</a>\n              </li>\n              {/* <li className=\"nav-item\">\n                <a className=\"nav-link\" href=\"/about\">{props.about}</a>\n              </li> */}\n            </ul>\n            <div className={`form-check form-switch text-${props.mode === 'light'?'dark':'light'}`}>\n              <input className=\"form-check-input\" onClick={props.toggleMode} type=\"checkbox\" role=\"switch\" id=\"flexSwitchCheckDefault\" />\n              <label className=\"form-check-label\" for=\"flexSwitchCheckDefault\">Dark Mode</label>\n          </div>\n          </div>\n        </div>\n      </nav>\n    )\n}\n\nNavbar.propTypes = {\n    title: PropTypes.string.isRequired,\n    about: PropTypes.string.isRequired\n}\n\nNavbar.defaultProps = {\n    title: \"Set Title Here\",\n    about: \"About Here\"\n}\nexport default Navbar\n","import React, {useState} from 'react'\n\nexport default function TextForm(props) {\n    const [text, setText] = useState(\"\");\n\n    const handleOnChange = (event) => {\n        setText(event.target.value)\n    }\n\n    const handleUpClick = () => {\n        let newText = text.toUpperCase();\n        setText(newText);\n        props.showAlert(\"Converted to Uppercase!\", \"success\");\n    }\n\n    const handleLoClick = () => {\n        let newText = text.toLowerCase();\n        setText(newText);\n        props.showAlert(\"Converted to Lowercase!\", \"success\");\n    }\n\n    const handleClearText = () => {\n        setText(\"\");\n        props.showAlert(\"Text Cleared!\", \"success\");\n    }\n\n    const handleCopy = () => {\n        let text = document.getElementById('myBox');\n        text.select();\n        navigator.clipboard.writeText(text.value)\n        props.showAlert(\"Copied to Clipboard!\", \"success\");\n    }\n\n    const handleExtraSpaces = () => {\n        let newText = text.split(/[ ]+/);\n        setText(newText.join(\" \"));\n        props.showAlert(\"Extra spaces has been removed!\", \"success\");\n    }\n    \n    const countWords = (text) => {\n        if (text.length === 0)\n            return 0;\n        else if (text.charAt(text.length - 1) === \" \")\n            return text.split(\" \").length - 1;\n        else \n            return text.split(\" \").length;\n    }\n\n    return (\n        <>\n        <div className=\"container\" style={{color: props.mode === 'dark'? 'white': '#042743'}}>\n            <h1>{props.heading}</h1>\n            <div className=\"mb-3 my-3\">\n                <textarea rows=\"8\" id=\"myBox\" className=\"form-control\" value={text} onChange={handleOnChange} style={{color: props.mode === 'dark'? 'white': '#042743', backgroundColor: props.mode === 'dark' ? '#555': 'white'}}></textarea>\n            </div>\n            <button className=\"btn btn-primary mx-1 my-1\" onClick={handleUpClick}>Convert to Uppercase</button>\n            <button className=\"btn btn-primary mx-1 my-1\" onClick={handleLoClick}>Convert to Lowercase</button>\n            <button className=\"btn btn-primary mx-1 my-1\" onClick={handleCopy}>Copy Text</button>\n            <button className=\"btn btn-primary mx-1 my-1\" onClick={handleClearText}>Clear Text</button>\n            <button className=\"btn btn-primary mx-1 my-1\" onClick={handleExtraSpaces}>Remove Extra Spaces</button>\n        </div>\n\n        <div className=\"container my-3\" style={{color: props.mode === 'dark'? 'white': '#042743'}}>\n            <h2>Your text summary</h2>\n            <strong>{countWords(text)} words {text.length} characters</strong>\n            <p>{0.008 * countWords(text)} minutes read</p>\n            <h3>Preview:</h3>\n            <p>{text.length > 0? text: \"Enter some text to textbox to preview here\"}</p>\n        </div>\n        </>\n    )\n}\n","import React from 'react'\n\nfunction Alert(props) {\n    const capitalize = (word) => {\n        const lower = word.toLowerCase();\n        return lower.charAt(0).toUpperCase() + lower.slice(1);\n    }\n\n    return (\n        props.alert && <div>\n            <div class={`alert alert-${props.alert.type} alert-dismissible fade show`} role=\"alert\">\n                <strong>{capitalize(props.alert.type)}</strong>: {props.alert.msg}\n            </div>\n        </div>\n    )\n}\n\nexport default Alert\n","import './App.css';\n// import About from './components/About';\nimport Navbar from './components/Navbar';\nimport TextForm from './components/TextForm';\nimport Alert from './components/Alert';\nimport React, { useState } from 'react'\n// import {\n//   BrowserRouter as Router,\n//   Switch,\n//   Route\n// } from 'react-router-dom';\n\nfunction App() {\n  const [mode, setMode] = useState('light');\n  const [alert, setAlert] = useState(null);\n\n  const showAlert = (message, type) => {\n    setAlert({\n      msg: message,\n      type: type\n    })\n    setTimeout(() => {\n      setAlert(null);\n    }, 1500)\n  }\n\n  const toggleMode = () => {\n    if (mode === 'light') {\n      setMode('dark');\n      document.body.style.backgroundColor = \"#042743\";\n      showAlert('Dark Mode has been enabled!', 'success');\n    }\n    else {\n      setMode('light');\n      document.body.style.backgroundColor = \"white\";\n      showAlert('Light Mode has been enabled!', 'success');\n    }\n  }\n\n  return (\n    <>\n      {/* <Router> */}\n      <Navbar title=\"TextUtils\" about=\"About\" mode={mode} toggleMode={toggleMode} />\n      <Alert alert={alert} />\n      <div className=\"container my-3\">\n        {/* <Switch>\n            <Route exact path=\"/about\">\n              <About />\n            </Route>\n            <Route exact path=\"/\"> */}\n        <TextForm heading=\"Enter the text to analyze below:\" mode={mode} showAlert={showAlert} />\n        {/* </Route> */}\n        {/* </Switch> */}\n      </div>\n      {/* </Router> */}\n    </>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}